
package ws;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "WrestleService", targetNamespace = "http://ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface WrestleService {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<ws.CheckResponse>
     */
    @WebMethod(operationName = "check")
    @RequestWrapper(localName = "check", targetNamespace = "http://ws/", className = "ws.Check")
    @ResponseWrapper(localName = "checkResponse", targetNamespace = "http://ws/", className = "ws.CheckResponse")
    public Response<CheckResponse> checkAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "check")
    @RequestWrapper(localName = "check", targetNamespace = "http://ws/", className = "ws.Check")
    @ResponseWrapper(localName = "checkResponse", targetNamespace = "http://ws/", className = "ws.CheckResponse")
    public Future<?> checkAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CheckResponse> asyncHandler);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<ws.Fight>
     * @throws Exceptions_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "check", targetNamespace = "http://ws/", className = "ws.Check")
    @ResponseWrapper(localName = "checkResponse", targetNamespace = "http://ws/", className = "ws.CheckResponse")
    @Action(input = "http://ws/WrestleService/checkRequest", output = "http://ws/WrestleService/checkResponse", fault = {
        @FaultAction(className = Exceptions_Exception.class, value = "http://ws/WrestleService/check/Fault/Exceptions")
    })
    public List<Fight> check(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws Exceptions_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg6
     * @return
     *     returns javax.xml.ws.Response<ws.InsertResponse>
     */
    @WebMethod(operationName = "insert")
    @RequestWrapper(localName = "insert", targetNamespace = "http://ws/", className = "ws.Insert")
    @ResponseWrapper(localName = "insertResponse", targetNamespace = "http://ws/", className = "ws.InsertResponse")
    public Response<InsertResponse> insertAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        int arg6);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @param arg6
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "insert")
    @RequestWrapper(localName = "insert", targetNamespace = "http://ws/", className = "ws.Insert")
    @ResponseWrapper(localName = "insertResponse", targetNamespace = "http://ws/", className = "ws.InsertResponse")
    public Future<?> insertAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        int arg6,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<InsertResponse> asyncHandler);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg6
     */
    @WebMethod
    @RequestWrapper(localName = "insert", targetNamespace = "http://ws/", className = "ws.Insert")
    @ResponseWrapper(localName = "insertResponse", targetNamespace = "http://ws/", className = "ws.InsertResponse")
    @Action(input = "http://ws/WrestleService/insertRequest", output = "http://ws/WrestleService/insertResponse")
    public void insert(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        int arg6);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<ws.GetAllPpvResponse>
     */
    @WebMethod(operationName = "getAllPpv")
    @RequestWrapper(localName = "getAllPpv", targetNamespace = "http://ws/", className = "ws.GetAllPpv")
    @ResponseWrapper(localName = "getAllPpvResponse", targetNamespace = "http://ws/", className = "ws.GetAllPpvResponse")
    public Response<GetAllPpvResponse> getAllPpvAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllPpv")
    @RequestWrapper(localName = "getAllPpv", targetNamespace = "http://ws/", className = "ws.GetAllPpv")
    @ResponseWrapper(localName = "getAllPpvResponse", targetNamespace = "http://ws/", className = "ws.GetAllPpvResponse")
    public Future<?> getAllPpvAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllPpvResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllPpv", targetNamespace = "http://ws/", className = "ws.GetAllPpv")
    @ResponseWrapper(localName = "getAllPpvResponse", targetNamespace = "http://ws/", className = "ws.GetAllPpvResponse")
    @Action(input = "http://ws/WrestleService/getAllPpvRequest", output = "http://ws/WrestleService/getAllPpvResponse")
    public List<String> getAllPpv();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<ws.GetAllCountriesResponse>
     */
    @WebMethod(operationName = "getAllCountries")
    @RequestWrapper(localName = "getAllCountries", targetNamespace = "http://ws/", className = "ws.GetAllCountries")
    @ResponseWrapper(localName = "getAllCountriesResponse", targetNamespace = "http://ws/", className = "ws.GetAllCountriesResponse")
    public Response<GetAllCountriesResponse> getAllCountriesAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllCountries")
    @RequestWrapper(localName = "getAllCountries", targetNamespace = "http://ws/", className = "ws.GetAllCountries")
    @ResponseWrapper(localName = "getAllCountriesResponse", targetNamespace = "http://ws/", className = "ws.GetAllCountriesResponse")
    public Future<?> getAllCountriesAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllCountriesResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCountries", targetNamespace = "http://ws/", className = "ws.GetAllCountries")
    @ResponseWrapper(localName = "getAllCountriesResponse", targetNamespace = "http://ws/", className = "ws.GetAllCountriesResponse")
    @Action(input = "http://ws/WrestleService/getAllCountriesRequest", output = "http://ws/WrestleService/getAllCountriesResponse")
    public List<String> getAllCountries();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<ws.GetAllFightsResponse>
     */
    @WebMethod(operationName = "getAllFights")
    @RequestWrapper(localName = "getAllFights", targetNamespace = "http://ws/", className = "ws.GetAllFights")
    @ResponseWrapper(localName = "getAllFightsResponse", targetNamespace = "http://ws/", className = "ws.GetAllFightsResponse")
    public Response<GetAllFightsResponse> getAllFightsAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllFights")
    @RequestWrapper(localName = "getAllFights", targetNamespace = "http://ws/", className = "ws.GetAllFights")
    @ResponseWrapper(localName = "getAllFightsResponse", targetNamespace = "http://ws/", className = "ws.GetAllFightsResponse")
    public Future<?> getAllFightsAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllFightsResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<ws.Fight>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllFights", targetNamespace = "http://ws/", className = "ws.GetAllFights")
    @ResponseWrapper(localName = "getAllFightsResponse", targetNamespace = "http://ws/", className = "ws.GetAllFightsResponse")
    @Action(input = "http://ws/WrestleService/getAllFightsRequest", output = "http://ws/WrestleService/getAllFightsResponse")
    public List<Fight> getAllFights();

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<ws.GetAllFightsPpvResponse>
     */
    @WebMethod(operationName = "getAllFightsPpv")
    @RequestWrapper(localName = "getAllFightsPpv", targetNamespace = "http://ws/", className = "ws.GetAllFightsPpv")
    @ResponseWrapper(localName = "getAllFightsPpvResponse", targetNamespace = "http://ws/", className = "ws.GetAllFightsPpvResponse")
    public Response<GetAllFightsPpvResponse> getAllFightsPpvAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllFightsPpv")
    @RequestWrapper(localName = "getAllFightsPpv", targetNamespace = "http://ws/", className = "ws.GetAllFightsPpv")
    @ResponseWrapper(localName = "getAllFightsPpvResponse", targetNamespace = "http://ws/", className = "ws.GetAllFightsPpvResponse")
    public Future<?> getAllFightsPpvAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllFightsPpvResponse> asyncHandler);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<ws.Fight>
     * @throws Exceptions_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllFightsPpv", targetNamespace = "http://ws/", className = "ws.GetAllFightsPpv")
    @ResponseWrapper(localName = "getAllFightsPpvResponse", targetNamespace = "http://ws/", className = "ws.GetAllFightsPpvResponse")
    @Action(input = "http://ws/WrestleService/getAllFightsPpvRequest", output = "http://ws/WrestleService/getAllFightsPpvResponse", fault = {
        @FaultAction(className = Exceptions_Exception.class, value = "http://ws/WrestleService/getAllFightsPpv/Fault/Exceptions")
    })
    public List<Fight> getAllFightsPpv(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2)
        throws Exceptions_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<ws.GetAllSeatsResponse>
     */
    @WebMethod(operationName = "getAllSeats")
    @RequestWrapper(localName = "getAllSeats", targetNamespace = "http://ws/", className = "ws.GetAllSeats")
    @ResponseWrapper(localName = "getAllSeatsResponse", targetNamespace = "http://ws/", className = "ws.GetAllSeatsResponse")
    public Response<GetAllSeatsResponse> getAllSeatsAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllSeats")
    @RequestWrapper(localName = "getAllSeats", targetNamespace = "http://ws/", className = "ws.GetAllSeats")
    @ResponseWrapper(localName = "getAllSeatsResponse", targetNamespace = "http://ws/", className = "ws.GetAllSeatsResponse")
    public Future<?> getAllSeatsAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllSeatsResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllSeats", targetNamespace = "http://ws/", className = "ws.GetAllSeats")
    @ResponseWrapper(localName = "getAllSeatsResponse", targetNamespace = "http://ws/", className = "ws.GetAllSeatsResponse")
    @Action(input = "http://ws/WrestleService/getAllSeatsRequest", output = "http://ws/WrestleService/getAllSeatsResponse")
    public List<String> getAllSeats(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

}
